name: CMake Build and Test Matrix

on: 
  push:
    branches:
      - stable
      - unstable
  pull_request:
    branches:
      - stable
      - unstable
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.config.name }} Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
        config: 
        - {
            name: "Windows (MSVC)",
            os: windows-latest,
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Visual Studio 16 2019",
            target: "ALL_BUILD"
          }
        - {
            name: "Ubuntu (Clang-9)",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "clang-9",
            cxx: "clang++-9",
            generators: "Ninja",
            target: "all"
          }
        - {
            name: "Ubuntu (GCC-9)",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc-9",
            cxx: "g++-9",
            generators: "Ninja",
            target: "all"
          }
        - {
            name: "macOS (Clang)",
            os: macos-latest,
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            generators: "Ninja",
            target: "all"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install cmake
          ninja --version
          cmake --version

      - name: Install dependencies on ubuntu
        if: runner.os == 'Linux'
        run: |
          python -m pip install --upgrade cmake
          sudo apt install \
            libxcursor-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxi-dev \
            libglew-dev
          ninja --version
          cmake --version

      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          python -m pip install cmake
          ninja --version
          cmake --version
      
      - name: Install python pacakges
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install numpy pytest
          
      - name: Configure
        run: |
          mkdir build
          cd build

          export PY_CMD=$(python -c 'import sys; print(sys.executable)')

          cmake \
            -DBUILD_TESTS=ON \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -DCMAKE_INSTALL_PREFIX:PATH=. \
            -DPython3_EXECUTABLE=${PY_CMD} \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}" \
            ..

      - name: Build
        run: |
            cd build
            cmake \
              --build . \
              --target ${{ matrix.config.target }} \
              --config ${{ matrix.config.build_type }}

      - name: Test
        run: |
            cd build
            ctest \
              -C ${{ matrix.config.build_type }} \
              -V --rerun-failed --output-on-failure
