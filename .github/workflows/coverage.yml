name: Test Coveralls Parallel

on: 
  pull_request:
    branches:
      - stable
  push:
    branches:
      - stable

jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          cancel_others: 'true'
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/README.md", "**/docs/**"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
  test:
    runs-on: ubuntu-latest
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    strategy:
      matrix:
        config: 
        - {
            name: "Default settings",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc-9",
            cxx: "g++-9",
            generators: "Ninja",
            target: "all",
            options: ""
          }
        - {
            name: "Hard steal",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc-9",
            cxx: "g++-9",
            generators: "Ninja",
            target: "all",
            options: "-DENABLE_CARMA_HARD_STEAL=ON"
          }
        - {
            name: "Soft steal",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc-9",
            cxx: "g++-9",
            generators: "Ninja",
            target: "all",
            options: "-DENABLE_CARMA_SOFT_STEAL=ON"
          }
        - {
            name: "Not own data",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc-9",
            cxx: "g++-9",
            generators: "Ninja",
            target: "all",
            options: "-DENABLE_CARMA_DONT_REQUIRE_OWNDATA=ON"
          }

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install dependencies on ubuntu
        run: |
          python -m pip install --upgrade cmake
          sudo apt install -y lcov
          ninja --version
          cmake --version
      
      - name: Install python pacakges
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install numpy pytest

      - name: Use Node.js 10.x
        uses: actions/setup-node@master
        with:
          node-version: 10.x

      - name: Configure
        run: |
          mkdir build
          cd build

          export PY_CMD=$(python -c 'import sys; print(sys.executable)')

          cmake \
            ${{ matrix.config.options }}  \
            -DCARMA_BUILD_TESTS=ON \
            -DENABLE_COVERAGE=ON\
            -DCMAKE_C_COMPILER="gcc-9" \
            -DCMAKE_CXX_COMPILER="g++-9" \
            -DCMAKE_INSTALL_PREFIX:PATH=. \
            -DPython3_EXECUTABLE=${PY_CMD} \
            -DCMAKE_BUILD_TYPE=Debug \
            ..

      - name: Build
        run: |
            cd build
            cmake --build . --target all --config Debug

      - name: Compute coverage
        run: |
            cd build
            cmake --build . --target coverage --config Debug

      - name: Collect coverage
        run: |
            mkdir coverage
            mv build/*coverage* coverage/
            cp coverage/coverage.info coverage/lcov.info
            lcov --list coverage/coverage.info

      - name: Coveralls Parallel
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          flag-name: run-${{ matrix.config.options }}
          parallel: true

  finish:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true
