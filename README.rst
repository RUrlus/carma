CARMA â€” Header only library enabling conversions between Numpy arrays and Armadillo matrices.
=============================================================================================

*CARMA is a header only library providing conversions between Numpy arrays and Armadillo matrices.*

Introduction
############

The primary purpose of carma is to provide fast conversions between Numpy_ arrays and Armadillo_ matrices, much like RcppArmadillo_ does for R and Armadillo.
The library relies heavily on the impressive `pybind11 <https://github.com/pybind/pybind11>`__ library for the automatic conversion and follows their Eigen conversion implementation.

The following functionality is available:

* Inplace updates of Numpy memory from Armadillo matrices
* (manual & automatic) bi-directional conversions between Numpy arrays and Armadillo matrices, vectors and cubes

For details on pybind11_ and Armadillo_ refer to there respective documentation:

Considerations
##############

In order to achieve fast conversions a number of choices have been made that impact memory safety and require user vigilance.

Memory order
++++++++++++


Armadillo is optimised for column-major (Fortran order) memory whereas Numpy defaults to row-major (C order).
The choice was made to automatically convert (read copy) C-order arrays to F-order arrays upon conversion to Armadillo.
This conversion can be avoided by ensuring all data generated by Numpy is done with `order='F'` or converted using `np.asarray(..., order='F')`.

Users should note that the library will not convert back to C-order when returning, this has consequences for matrices and cubes.
Cubes will be returned with a different axis order [slices, rows, columns] than Numpy arrays for both C- and F-order arrays, respectively `[rows, columns, slices]` and `[columns, rows, slices]`.
This  can be remedied with:

.. code-block:: python
    
   np.moveaxis(mat, [0, 1, 2], [2, 0, 1])


Memory safety
+++++++++++++

In order to provide fast conversions the default behaviour of library avoids copying where possible.
However, this requires users to be vigilant to avoid aliasing of memory.

*numpy --> armadillo*

* Borrow memory if F contiguous arrays
* Copy memory to F contiguous array

*armadillo --> numpy*

* For matrices the default behaviour is to steal the memory.
* For rows, columns and cubes the default is to copy out.

Rows and columns appear to shadow an underlying matrix after certain operations from which the memory cannot be stolen using the current approach.
Cubes in contrast are containers for matrices, where each slice of the cube is a matrix.
Nevertheless, the same restrictions apply to cubes.

Functionality examples
######################

On a high level carma provides three ways to convert arrays:

Manual conversion
+++++++++++++++++

.. code-block:: c++

    #include <armadillo>
    #include <carma/carma.h>
    #include <pybind11/pybind11.h>
    #include <pybind11/numpy.h>
    
    py::array<double> manual_example(py::array<double> & arr) {
        // convert to armadillo matrix carma::arr_to_mat(py::array<T> & arr, bool copy=false)
        arma::Matrix<double> mat = carma::arr_to_mat(arr)
        // do something useful here ...
        return carma::mat_to_array(result);
    }

Automatic conversion
++++++++++++++++++++

.. code-block:: c++

    #include <armadillo>
    #include <carma/carma.h>
    #include <pybind11/pybind11.h>
    #include <pybind11/numpy.h>
    
    arma::Matrix<double> automatic_example(arma::Matrix<double> & mat) {
        // do something useful here ...
        return result;
    }

Update array
++++++++++++

.. code-block:: c++

    #include <armadillo>
    #include <carma/carma.h>
    #include <pybind11/pybind11.h>
    #include <pybind11/numpy.h>
    
    void update_example(py::array<double> & arr) {
        // convert to armadillo matrix carma::arr_to_mat(py::array<T> & arr, bool copy=false)
        arma::Matrix<double> mat = carma::arr_to_mat(arr)
        // do something useful here ...
        return carma::update_array(mat);
    }

See the documentation for details.

Compatibility
#############

carma has been tested with:

* armadillo-9.800.1
* pybind11-2.4.3

**Compiler requirements through pybind11**

1. Clang/LLVM 3.3 or newer (for Apple Xcode's clang, this is 5.0.0 or newer)
2. GCC 4.8 or newer
3. Microsoft Visual Studio 2015 Update 3 or newer
4. Intel C++ compiler 17 or newer
5. Cygwin/GCC (tested on 2.5.1)

About
#####

This project was created by Ralph Urlus.

License
#######

carma is provided under a Apache 2.0 license that can be found in the LICENSE file. By using, distributing, or contributing to this project, you agree to the terms and conditions of this license.

.. _numpy: https://numpy.org
.. _rcpparmadillo: https://github.com/RcppCore/RcppArmadillo
.. _pybind11: https://pybind11.readthedocs.io/en/stable/intro.html
.. _armadillo: http://arma.sourceforge.net/docs.html
