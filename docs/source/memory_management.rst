.. _memorder:

############
Memory Order
############

A significant difference between Numpy arrays and Armadillo matrices is the memory order.
Armadillo is optimised for column-major (Fortran order) memory whereas Numpy defaults to row-major (C order).

The default behaviour is to automatically convert matrices and cubes, read copy, C-order arrays to F-order arrays upon conversion to Armadillo.  
This behaviour can be disabled at compile time, see :ref:`memset`.

This conversion can be avoided by ensuring all data generated by Numpy is done with `order='F'` or converted using:

.. code-block:: python
    
   np.asarray(cdata, type=np.float64, order='F')

.. note:: Carma will not convert F-order memory back to C-order when returning, this has consequences for matrices and cubes.

Cubes will be returned with a different axis order `[slices, rows, columns]` than Numpy arrays for both C- and F-order arrays, respectively `[rows, columns, slices]` and `[columns, rows, slices]`.

This can be remedied with:

.. code-block:: python
    
   np.moveaxis(cube, (0, 1, 2), (2, 0, 1))


.. _memsafe:

#############
Memory Safety
#############

In order to provide fast conversions the default behaviour of library avoids copying where possible.
However, this requires users to be vigilant to avoid aliasing of memory.
This section describes when copies are made by default.

**Numpy --> Armadillo**

The memory is copied if:

.. warning:: Note that the user set value for copy is overridden if one of the below conditions is true

#. array's memory is not aligned
#. array's memory is not writable
#. array does not own the memory
#. array has `ndim >= 2` and array's memory is not F contiguous

.. note:: Automatic copying for conditions 3 and 4 can be disabled, independently, with compile time definitions, see the section :ref:`memset`.

**Armadillo --> Numpy**

Armadillo matrices are **not** copied out by default whereas Cols, Rows and Cubes are copied out by default as these structures may reference memory rather than own it directly.

Rows and columns appear to reference memory of another Armadillo object after certain operations, where temporaries can be avoided.
For these vectors the memory cannot be stolen using the current approach.
As it is hard to detect when this is occurring the default behaviour is to copy out.

Cubes in contrast are containers for matrices, where each slice of the cube is a matrix.
Stealing the memory of these matrices is not currently supported.

Future development will attempt to remedy these problems.

.. warning:: The type caster (automatic conversion) ignores the return policy for `{Col, Row, Cube}` due to potential referencing of memory by Armadillo.

If you are certain you want to return one these types without copy use the manual conversion function.

.. _memset:

###############
Memory Settings
###############

CARMA offers two settings at compile time to disable automatic copies in the Numpy to Armadillo conversion:

* Automatic copies of arrays with C-contiguous memory to F-contiguous memory layout can be disabled by setting:

.. code-block::

    -DCARMA_DONT_REQUIRE_F_CONTIGUOUS

* Automatic copies of arrays that don't own their memory by setting:

.. code-block::

    -DCARMA_DONT_REQUIRE_OWNDATA
